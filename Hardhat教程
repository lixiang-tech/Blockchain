1.设置环境
（1）使用windows11系统安装WSL2（Windows Subsystem for Linux）
    以管理员身份运行Windows命令提示符，输入命令：wsl --install 
    按提示输入姓名，密码，安装完成后重启系统。
    打开Microsoft Store商店，搜索Ubuntu，下载Ubuntu 24.04 LTS，下载完成点击打开按钮，按提示输入姓名，密码，安装完成后重启系统。
    wsl -l -v  //展示系统列表
    wsl --unregister  Ubuntu  //删除默认安装的Ubuntu系统，保留最新系统Ubuntu-24.04
    wsl --set-default-version 2  //设置WSL系统默认版本为2
    sudo apt update && sudo apt upgrade //更新和升级软件包
    打开Microsoft Store商店，搜索Windows Terminal，安装终端窗口，以后都使用此窗口，方便windows命令窗口和WSL系统窗口切换。
（2）配置WSL系统网络，与windows系统网络镜像
    在C:\用户\用户名   文件夹内创建一个记事本，记事本内容为
    [wsl2]
    networkingMode=mirrored
    
    保存记事本，把文件名改为.wslconfig

    wsl --shutdown //关闭WSL系统，8秒后再打开WSL系统
（3）安装zsh/oh-my-zsh
    zsh 配合 oh-my-zsh 和相关插件，可以实现命令高亮、命令补全、git 快捷操作等等。
    # 更新 package
    sudo apt update && sudo apt upgrade

    # 安装 zsh
    sudo apt install zsh -y

    # 安装 oh-my-zsh
    wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh || true

    # 安装命令补全和高亮插件
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/plugins/zsh-syntax-highlighting
    git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/plugins/zsh-autosuggestions
    sed -i 's/plugins=(git)/plugins=(git zsh-autosuggestions zsh-syntax-highlighting)/g' ~/.zshrc

    # 将 zsh 设置为默认的shell
    chsh -s /bin/zsh 
  
    编辑配置文件vim .zshrc，不习惯 vim 的话，可以用 VSCode 打开code .zshrc，在最后加入：
   # 列表形式显示所有文件详情
    alias ll="ls -alF"
    # 删除文件前需确认
    alias rm="rm -i"
（4）配置Git
    Git 默认会忽略大小写，所以需要修改配置。
    # 启用大小写敏感
    git config --global core.ignorecase false
   
    常规配置：
    # 配置用户名和密码
    git config --global user.name "Your Name"
    git config --global user.email "youremail@domain.com"
（5）安装nvm/node/npm
     curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
     nvm install 20
     node -v
     npm -v
（6）VSCode
   安装远程开发扩展包https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack
   Node.js扩展包https://marketplace.visualstudio.com/items?itemName=waderyan.nodejs-extension-pack
   使用code . 命令打开VSCode，注意窗口左下角显示WSL：Ubuntu-24.04
（7）文件系统
    需要注意的是我们现在有了两套系统，两者的文件类型并不一致，跨系统访问和传输文件的话效率会下降很多，最好各存各的，以用户目录为例：
    如果在 Windows 上开发，就将文件放在：C:\Users\<UserName>\
    如果在 Ubuntu 上开发，就将文件放在：\\wsl$\ubuntu\home\<UserName>\
2.部署合约
（1）创建项目文件
打开命令窗口输入一下命令：
mkdir todolist  //创建一个todolist文件夹
cd todolist  //转到todolist文件夹
npm init -y //创建空项⽬ 
npm i -D hardhat //安装hardhat依赖 
npx hardhat init  // hardhat 初始化JavaScript项⽬
在 Visual Studio Code 中，打开 todolist 文件夹。
在 Visual Studio Code 中的 contracts 目录中创建⼀个文件，将其命名为 TodoList.sol。（添加solidity代码）

（2）添加测试代码
在 ignition/modules 文件夹中创建 TodoList.js 文件。（测试用的javascript代码。）
在主项目目录中，打开 hardhat.config.js。粘贴如下代码：
require("@nomicfoundation/hardhat-toolbox"); 
/** @type import('hardhat/config').HardhatUserConfig */ 
module.exports = { 
solidity: "0.8.24", 
networks: { 
hardhat: {}, 
}, 
};
（3）部署合约
npx hardhat node  //启动本地网络
npx hardhat ignition deploy ./ignition/modules/TodoList.js --network localhost  //在新的命令行中将TodoList.js部署到本地网络

（4）添加部署到Sepolia测试网的配置信息
使用环境变量保存隐私信息
npm install dotenv --save //为了在 hardhat 中使用环境变量，安装 dotenv
打开VS Code，在项目根目录下创建⼀个文件名为 .env 的文件，添加如下代码
INFURA_ID=***   
PRIVATE_KEY=**    
用来存储敏感信息和配置变量，PRIVATE_KEY( 我们的账户私钥信息从metamask 获取) 以及 INFURA_ID（从 Infura 官网注册账号获取 ）
在配置⽂件 hardhat.config.js 中，加入 Sepolia 的配置
require("@nomicfoundation/hardhat-toolbox"); 
require("dotenv").config(); 
/** @type import('hardhat/config').HardhatUserConfig */ 
module.exports = { 
solidity: "0.8.24", 
networks: { 
hardhat: {}, 
sepolia: { 
url:
 "https://sepolia.infura.io/v3/" + process.env.INFURA_ID, accounts: [`0x${process.env.PRIVATE_KEY}`], 
 }, 
 }, 
 };
（5）部署到Sepolia测试网
npx hardhat ignition deploy ./ignition/modules/TodoList.js --network sepolia  //在新的命令行中将TodoList.js部署到Sepolia




    
 
 

    

    







